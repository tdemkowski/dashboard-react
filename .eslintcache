[{"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\tableList.js":"1","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\index.js":"2","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\pageVariants.js":"3","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\pageTransition.js":"4","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\Utils\\Notification.js":"5","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\notifications.js":"6","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\userProfile.js":"7","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\Utils\\Stream.js":"8","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\dashboard.js":"9","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\icons.js":"10","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\Utils\\Alert.js":"11","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\typography.js":"12","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\Utils\\DoughnutExample.js":"13","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\loadIcons.js":"14","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\maps.js":"15","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\theme.js":"16","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\section.js":"17","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\reduxPlaying.js":"18","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\reportWebVitals.js":"19","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\Utils\\BubbleExample.js":"20","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Redux\\store.js":"21","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Redux\\reducers.js":"22","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Redux\\actions.js":"23"},{"size":3625,"mtime":1614147132733,"results":"24","hashOfConfig":"25"},{"size":727,"mtime":1618049232536,"results":"26","hashOfConfig":"25"},{"size":275,"mtime":1610354263706,"results":"27","hashOfConfig":"25"},{"size":118,"mtime":1610288227667,"results":"28","hashOfConfig":"25"},{"size":1386,"mtime":1614949176259,"results":"29","hashOfConfig":"25"},{"size":3654,"mtime":1615278511640,"results":"30","hashOfConfig":"25"},{"size":2588,"mtime":1611754700832,"results":"31","hashOfConfig":"25"},{"size":1331,"mtime":1615395925452,"results":"32","hashOfConfig":"25"},{"size":3432,"mtime":1614845829623,"results":"33","hashOfConfig":"25"},{"size":1336,"mtime":1615212630562,"results":"34","hashOfConfig":"25"},{"size":1331,"mtime":1615397731168,"results":"35","hashOfConfig":"25"},{"size":1694,"mtime":1611038424058,"results":"36","hashOfConfig":"25"},{"size":543,"mtime":1614759497957,"results":"37","hashOfConfig":"25"},{"size":167,"mtime":1611038721440,"results":"38","hashOfConfig":"25"},{"size":1323,"mtime":1611475784827,"results":"39","hashOfConfig":"25"},{"size":3301,"mtime":1615397764276,"results":"40","hashOfConfig":"25"},{"size":837,"mtime":1612174176552,"results":"41","hashOfConfig":"25"},{"size":1324,"mtime":1618053108513,"results":"42","hashOfConfig":"25"},{"size":362,"mtime":1607322146703,"results":"43","hashOfConfig":"25"},{"size":1430,"mtime":1614759490417,"results":"44","hashOfConfig":"25"},{"size":214,"mtime":1618049228750,"results":"45","hashOfConfig":"25"},{"size":577,"mtime":1618053466165,"results":"46","hashOfConfig":"25"},{"size":218,"mtime":1618053197625,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1w77n2c",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"53"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"53"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\tableList.js",[],["108","109"],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\index.js",[],["110","111"],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\pageVariants.js",[],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\pageTransition.js",[],["112","113"],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\Utils\\Notification.js",["114"],"import React, { useState, useEffect } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\n\nimport close from \"../../../Images/close.svg\";\n\nconst Notification = props => {\n  let offset =\n    props.lastClicked[0] <= props.index &&\n    props.lastClicked[1] === props.side &&\n    props.lastClicked[0] >= 0;\n  let [top, setTop] = useState((props.top || 0) + 2 + props.index * 3.5 + 3.5);\n  const [opacity, setOpacity] = useState(1);\n  const opacitySpring = useSpring({\n    opacity: opacity,\n    transform: opacity ? \"scale(1, 1)\" : \"scale(1.05, 1)\",\n    config: {\n      duration: 150,\n    },\n  });\n  const topSpring = useSpring({\n    top: offset ? `${top}rem` : `${top - 3.5}rem`,\n  });\n\n  useEffect(() => {\n    if (offset) {\n      setTop(top - 3.5);\n      // setOffset(offset);\n    }\n  }, [props.index]);\n\n  return (\n    <animated.div\n      className={\"notification-item \" + (props.color ? props.color : \"info\")}\n      style={{ ...topSpring, ...opacitySpring }}\n      onClick={() => {\n        setOpacity(0);\n        props.removeNotification(props.index, props.side);\n      }}\n    >\n      {props.container}\n      {props.container.props.children ===\n      \"This is a plain notification\" ? null : (\n        <div className=\"close-button\">\n          <img src={close} alt=\"close icon\" />\n        </div>\n      )}\n    </animated.div>\n  );\n};\n\nexport default React.memo(Notification);\n","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\notifications.js",["115","116"],"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport pageVariants from \"./pageVariants\";\nimport pageTransition from \"./pageTransition\";\n\nimport Notification from \"./Utils/Notification\";\nimport Stream from './Utils/Stream'\n\nimport star from \"../../Images/Icons/star.svg\";\nimport stopwatch from \"../../Images/Icons/stopwatch.svg\";\nimport \"./Styles/notifications.scss\";\n\nconst leftSampleArray = [\n  <p>This is a plain notification</p>,\n  <p>This notification has a closed button</p>,\n  <div className=\"notification-item-inner\">\n    <img\n      src={star}\n      alt=\"star icon\"\n      style={{ width: \"1.8rem\", marginRight: \"8px\" }}\n    />\n    <p>And this one also has an icon</p>\n  </div>,\n  <div className=\"notification-item-inner\">\n    <img\n      src={stopwatch}\n      alt=\"stopwatch icon\"\n      style={{ width: \"1.8rem\", marginRight: \"8px\" }}\n    />\n    <p>\n      Here is how it looks as the content amount increases. By default the\n      notifications will vanish after 3 seconds. You can use mode=\"static\" to\n      prevent this. Also, click on the notifications.\n    </p>\n  </div>,\n];\n\nconst rightSampleArray = [\n  [<p>Primary - This text is a placeholder</p>, \"primary\"],\n  [<p>Success - This text is a placeholder</p>, \"success\"],\n  [<p>Info - This text is a placeholder</p>, \"info\"],\n  [<p>Warning - This text is a placeholder</p>, \"warning\"],\n  [<p>Danger - This text is a placeholder</p>, \"danger\"],\n];\n\nconst Notifications = () => {\n  const [leftNotifications, setLN] = useState(leftSampleArray);\n  const [rightNotifications, setRN] = useState(rightSampleArray);\n  const [lastClicked, setLastClicked] = useState([-1, \"\"]);\n  const [streamCount, setStreamCount] = useState(0)\n\n  const removeNotification = (index, string) => {\n    setTimeout(() => {\n      if (string === \"left\") {\n        setLN(leftNotifications.filter((e, i) => i !== index));\n        setLastClicked([index, \"left\"]);\n      } else {\n        setRN(rightNotifications.filter((e, i) => i !== index));\n        setLastClicked([index, \"right\"]);\n      }\n    }, 200);\n  };\n\n  return (\n    <motion.div\n      style={{ position: \"absolute\" }}\n      className=\"notifications-wrapper\"\n      initial=\"initial\"\n      animate=\"in\"\n      exit=\"out\"\n      variants={pageVariants}\n      transition={pageTransition}\n    >\n      <div className=\"notifications-window\">\n        <h2>Notification showcase</h2>\n        <p className=\"muted-text\">\n          Made by yours truly. Blabla insert latin nonsense here, somnia caela\n          habent.\n        </p>\n        <div className=\"notifications\">\n          <div className=\"notifications-left\">\n            <p>Different styles</p>\n            {leftNotifications.map((container, index) => (\n              <Notification\n                key={index + Math.random()}\n                container={container}\n                index={index}\n                removeNotification={removeNotification}\n                side={\"left\"}\n                lastClicked={lastClicked}\n              />\n            ))}\n          </div>\n          <div className=\"notifications-right\">\n            <p>They come in different colors</p>\n            {rightNotifications.map((container, index) => (\n              <Notification\n                key={index + Math.random()}\n                container={container[0]}\n                color={container[1]}\n                index={index}\n                removeNotification={removeNotification}\n                side={\"right\"}\n                lastClicked={lastClicked}\n              />\n            ))}\n          </div>\n        </div>\n\n        <Stream />\n      </div>\n    </motion.div>\n  );\n};\n\nexport default Notifications;\n","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\userProfile.js",["117","118"],"import react from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport pageVariants from \"./pageVariants\";\n\nimport \"./Styles/userProfile.scss\";\nimport pageTransition from \"./pageTransition\";\n\nimport facebook from \"../../Images/facebook.svg\";\nimport instagram from \"../../Images/instagram.svg\";\nimport twitter from \"../../Images/twitter.svg\";\nimport { ReactSVG } from \"react-svg\";\n\nconst names = [\n  \"Username\",\n  \"Email\",\n  \"Company\",\n  \"First Name\",\n  \"Last Name\",\n  \"Address\",\n  \"City\",\n  \"Country\",\n  \"Postal Code\",\n];\n\nconst widths = {\n  Username: \"30%\",\n  Email: \"30%\",\n  Company: \"30%\",\n  \"First Name\": \"45%\",\n  \"Last Name\": \"45%\",\n  Address: \"90%\",\n  City: \"29.5%\",\n  Country: \"29.5%\",\n  \"Postal Code\": \"29.5%\",\n};\n\nconst UserProfile = () => {\n  const createForm = () => {\n    return (\n      <form>\n        {names.map(name => (\n          <div\n            className={\"form-entry\"}\n            key={name}\n            style={{ width: widths[name] }}\n          >\n            <h4>{name}</h4>\n            <input type=\"text\"></input>\n          </div>\n        ))}\n        <button>Update Profile</button>\n      </form>\n    );\n  };\n\n  const createFakeTweet = () => {\n    return (\n      <div className=\"fakeTweet\">\n        <div className=\"background\"></div>\n        <div className=\"profile\">\n          <div className=\"profile-image\"></div>\n          <div className=\"profile-details\">\n            <p className=\"danger\">Bearded Dragon</p>\n            <p\n              className=\"muted-text\"\n              style={{ fontSize: \"0.8em\", marginBottom: \"1rem\" }}\n            >\n              lizard_23x\n            </p>\n            <p style={{ marginBottom: \"3rem\" }}>\n              All the women in my family were bearded, especially the dragons.\n            </p>\n          </div>\n          <hr style={{ width: \"90%\", marginBottom: \"1rem\" }}></hr>\n          <div className=\"platforms\">\n            <ReactSVG src={facebook} className=\"icon\" />\n            <ReactSVG src={instagram} className=\"icon\" />\n            <ReactSVG src={twitter} className=\"icon\" />\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <motion.div\n    style={{position: 'absolute'}}\n      initial=\"initial\"\n      animate=\"in\"\n      exit=\"out\"\n      variants={pageVariants}\n      transition={pageTransition}\n      className=\"userProfile-wrapper\"\n    >\n\n        <div style={{ position: \"relative\" }} className=\"userProfile-window\">\n          <h3>Edit Profile</h3>\n          {createForm()}\n        </div>\n        {createFakeTweet()}\n\n    </motion.div>\n  );\n};\n\nexport default UserProfile;\n",["119","120"],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\Utils\\Stream.js",["121"],"import { useState, useEffect } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport Alert from \"./Alert\";\n\nconst Stream = props => {\n  const MAX_ALERTS = 30\n  const STREAM_LIFETIME = 2500\n  const [alertCount, setAlertCount] = useState(0);\n  const [alertArray, setAlertArray] = useState([]);\n\n  const streamWrapperProps = {\n    height: `${alertCount * 3.5}rem`,\n  }\n  \n  const streamWrapperPropsBottom = useSpring({\n    top: `calc(${-(alertArray.length*3.5)}rem + 93.5vh)`\n  })\n\n  useEffect(() => {\n    if (alertArray.length === 0) {\n      setAlertCount(0);\n    }\n  }, [alertArray]);\n\n  const createAlert = () => {\n    return alertArray.map(x => x);\n  };\n\n  return (\n    <div className=\"notification-stream\">\n      <div\n        className=\"stream-button\"\n        onClick={() => {\n          if (alertCount < MAX_ALERTS) {\n            alertArray.unshift(\n              <Alert key={alertCount} alertCount={alertCount} lifetime={STREAM_LIFETIME} />\n            );\n            setAlertCount(alertCount + 1);\n          }\n        }}\n      >\n        <p>Click here to see a notification stream</p>\n      </div>\n      <animated.div className=\"notification-stream-wrapper\" style={{...streamWrapperProps, ...streamWrapperPropsBottom}}>\n        {createAlert()}\n      </animated.div>\n    </div>\n  );\n};\n\nexport default Stream;\n","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\dashboard.js",["122","123"],"import react from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport pageVariants from \"./pageVariants\";\nimport pageTransition from \"./pageTransition\";\nimport { ReactSVG } from \"react-svg\";\n\nimport \"./Styles/dashboard.scss\";\nimport { Pie, Bar } from \"react-chartjs-2\";\n\nimport DoughnutExample from \"./Utils/DoughnutExample\";\nimport BubbleExample from \"./Utils/BubbleExample\";\n\nimport icon1 from \"../../Images/Icons/cloud.svg\";\nimport icon2 from \"../../Images/Icons/app.svg\";\nimport icon3 from \"../../Images/Icons/worldwide.svg\";\nimport icon4 from \"../../Images/Icons/clock-1.svg\";\n\nconst Dashboard = () => {\n  const data = {\n    labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"],\n    datasets: [\n      {\n        label: \"# of Votes\",\n        data: [12, 19, 3, 5, 2, 3],\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(255, 206, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n          \"rgba(153, 102, 255, 0.2)\",\n          \"rgba(255, 159, 64, 0.2)\",\n        ],\n        borderColor: [\n          \"rgba(255, 99, 132, 1)\",\n          \"rgba(54, 162, 235, 1)\",\n          \"rgba(255, 206, 86, 1)\",\n          \"rgba(75, 192, 192, 1)\",\n          \"rgba(153, 102, 255, 1)\",\n          \"rgba(255, 159, 64, 1)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const generateTopStat = (icon, iconId, str1, str2, str3) => {\n    return (\n      <div className=\"top-stats\">\n        <div className=\"stats\">\n          <ReactSVG src={icon1} id={iconId} />\n          <div className=\"details\">\n            <p>{str1}</p>\n            <h2>{str2}</h2>\n          </div>\n        </div>\n        <hr />\n        <div className=\"actions muted-text\">\n          <img className=\"actions-icon\" src={icon1} alt=\"actions icon\"/>\n          <p>{str3}</p>\n        </div>\n      </div>\n    );\n  };\n\n  const generateChart = (component, str1, str2, str3) => {\n    return (\n      <div className=\"charts\">\n        <h3>{str1}</h3>\n        <p>{str2}</p>\n        {component}\n        <hr></hr>\n        <div className=\"actions muted-text\">\n          <img className=\"actions-icon\" src={icon1} alt=\"actions icon\"/>\n          <p>{str3}</p>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <motion.div\n      style={{ position: \"absolute\" }}\n      initial=\"initial\"\n      animate=\"in\"\n      exit=\"out\"\n      variants={pageVariants}\n      transition={pageTransition}\n      className=\"dashboard-wrapper\"\n    >\n      <div className=\"top-stats-wrapper\">\n        {generateTopStat(icon1, \"icon1\", \"Capacity\", \"105GB\", \"Updated now\")}\n        {generateTopStat(icon2, \"icon2\", \"Revenue\", \"$1,345\", \"Updated 2 minutes ago\")}\n        {generateTopStat(icon3, \"icon3\", \"Errors\", \"23\", \"Last day\")}\n        {generateTopStat(icon4, \"icon4\", \"Followers\", \"+7\", \"Updated yesterday\")}\n      </div>\n      <div className=\"charts-wrapper\">\n        {generateChart(<Pie data={data} height={250} width={500} />, \"User Behaviour\", \"24 hour performance\", \"ICON A note was left here\")}\n        {generateChart(<Bar data={data} height={250} width={500} />, \"Information chart\", \"Performance in the last year\", \"Updated today\")}\n        {generateChart(<DoughnutExample />, \"Some information\", \"For these years\", \"Updated 5 minutes ago\")}\n        {generateChart(<BubbleExample />, \"Even more data\", \"Last century\", \"Updated 2 seconds ago\")}\n      </div>\n    </motion.div>\n  );\n};\n\nexport default Dashboard;\n","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\icons.js",["124","125","126"],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\Utils\\Alert.js",["127"],"import { useEffect, useState } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport close from \"../../../Images/close.svg\";\n\nconst Alert = props => {\n  const LIFETIME = props.lifetime;\n  const [triggerTime, setTriggerTime] = useState(false);\n  const [alive, setAlive] = useState(true);\n  const [clicked, setClicked] = useState(false);\n  const timeProps = useSpring({\n    width: triggerTime ? `${100}%` : `${0}%`,\n    config: {\n      duration: LIFETIME,\n    },\n  });\n  const streamProps = useSpring({\n    opacity: alive ? (clicked ? 0.2 : 1) : 0,\n    transform: alive ? \"scale(1, 1)\" : \"scale(1.05, 1)\",\n    bottom: 0,\n    config: {\n      duration: 150,\n    },\n  });\n\n  useEffect(() => {\n    setTriggerTime(true);\n    // setAlive(true);\n    setTimeout(() => {\n      setAlive(false);\n    }, LIFETIME);\n  }, [props.alertCount]);\n\n  return (\n    <animated.div className=\"stream\" style={{ ...streamProps }}>\n      <img src=\"\" alt=\"\" />\n      <div className=\"stream-content\">\n        <p>Spamming notifications as if the world is ending.</p>\n        <div className=\"close-button\" onClick={() => setClicked(true)}>\n          <img src={close} alt=\"close icon\" />\n        </div>\n      </div>\n      <animated.div className=\"stream-time\" style={timeProps}></animated.div>\n    </animated.div>\n  );\n};\n\nexport default Alert;\n","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\typography.js",["128","129"],"import react from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport pageVariants from \"./pageVariants\";\nimport pageTransition from \"./pageTransition\";\n\nimport './Styles/typography.scss'\n\nconst Typography = () => {\n  return (\n    <motion.div\n    style={{position: 'absolute'}}\n      initial=\"initial\"\n      animate=\"in\"\n      exit=\"out\"\n      variants={pageVariants}\n      transition={pageTransition}\n      className=\"typography-window\"\n    >\n      <p>Header 1:</p>\n      <h1>This text represents Header 1</h1>\n      <hr></hr>\n      <p>Header 2:</p>\n      <h2>This text represents Header 2</h2>\n      <hr></hr>\n      <p>Header 3:</p>\n      <h3>This text represents Header 3</h3>\n      <hr></hr>\n      <p>Header 4:</p>\n      <h4>This text represents Header 4</h4>\n      <hr></hr>\n      <p>Header 5:</p>\n      <h5>This text represents Header 5</h5>\n      <hr></hr>\n      <p>Paragraph:</p>\n      <p>This text represents a paragraph, but unfortunately I am too lazy to find lorem ipsum placeholder for it. So I guess you're stuck with this text for the reminder of the example. Isn't that just horrific? This text is even readable english! What kind of a placeholder is that supposed to be?\n</p>\n      <hr></hr>\n      <p>Muted Text:</p>\n      <p className=\"muted-text\">And this text is a paragraph that is muted</p>\n      <hr></hr>\n      <p>Colors:</p>\n      <p className=\"primary\">Primary text color</p>\n      <p className=\"info\">Info text color</p>\n      <p className=\"success\">Success text color</p>\n      <p className=\"warning\">Warning text color</p>\n      <p className=\"danger\">Danger text color</p>\n\n      <hr></hr>\n    </motion.div>\n  );\n};\n\nexport default Typography;\n","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\Utils\\DoughnutExample.js",[],["130","131"],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\loadIcons.js",[],["132","133"],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\maps.js",["134"],"import { useEffect } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport pageVariants from \"./pageVariants\";\nimport pageTransition from \"./pageTransition\";\nimport L from 'leaflet'\n\nimport \"./Styles/map.scss\";\n\nconst Maps = () => {\n  useEffect(() => {\n    const sydneyCoordinates = {latitude: -33.8559799094, longitude: 151.20666584}\n    let mymap = L.map(\"mapid\").setView([sydneyCoordinates.latitude, sydneyCoordinates.longitude], 13);\n    L.tileLayer(\n      \"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\",\n      {\n        attribution:\n          'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        maxZoom: 18,\n        id: \"mapbox/streets-v11\",\n        tileSize: 512,\n        zoomOffset: -1,\n        accessToken: \"pk.eyJ1IjoidGRlbWs5NiIsImEiOiJja2J6NnYycmEwaWoyMnNsbTdqc2EwMnV5In0.Ku0nePVvd39pCiZd8Ntq6A\",\n      }\n    ).addTo(mymap);\n  }, [])\n\n  return (\n    <motion.div\n      style={{ position: \"absolute\" }}\n      initial=\"initial\"\n      animate=\"in\"\n      exit=\"out\"\n      variants={pageVariants}\n      transition={pageTransition}\n      className=\"map-window\"\n    >\n      <div id=\"mapid\"></div>\n    </motion.div>\n  );\n};\n\nexport default Maps;\n","C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\theme.js",["135","136"],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\section.js",[],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\reduxPlaying.js",["137","138"],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\reportWebVitals.js",[],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Components\\Sections\\Utils\\BubbleExample.js",[],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Redux\\store.js",[],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Redux\\reducers.js",["139"],"C:\\Users\\tdemk\\Documents\\Tortoise GIT\\react-dashboard-retry\\src\\Redux\\actions.js",[],{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"140","replacedBy":"144"},{"ruleId":"142","replacedBy":"145"},{"ruleId":"140","replacedBy":"146"},{"ruleId":"142","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":29,"column":6,"nodeType":"150","endLine":29,"endColumn":19,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":50,"column":10,"nodeType":"154","messageId":"155","endLine":50,"endColumn":21},{"ruleId":"152","severity":1,"message":"156","line":50,"column":23,"nodeType":"154","messageId":"155","endLine":50,"endColumn":37},{"ruleId":"152","severity":1,"message":"157","line":1,"column":8,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13},{"ruleId":"152","severity":1,"message":"158","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":25},{"ruleId":"140","replacedBy":"159"},{"ruleId":"142","replacedBy":"160"},{"ruleId":"152","severity":1,"message":"161","line":9,"column":22,"nodeType":"154","messageId":"155","endLine":9,"endColumn":35},{"ruleId":"152","severity":1,"message":"157","line":1,"column":8,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13},{"ruleId":"152","severity":1,"message":"158","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":25},{"ruleId":"152","severity":1,"message":"157","line":1,"column":8,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13},{"ruleId":"152","severity":1,"message":"158","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":25},{"ruleId":"162","severity":1,"message":"163","line":18,"column":15,"nodeType":"164","endLine":18,"endColumn":58},{"ruleId":"148","severity":1,"message":"165","line":31,"column":6,"nodeType":"150","endLine":31,"endColumn":24,"suggestions":"166"},{"ruleId":"152","severity":1,"message":"157","line":1,"column":8,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13},{"ruleId":"152","severity":1,"message":"158","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":25},{"ruleId":"140","replacedBy":"167"},{"ruleId":"142","replacedBy":"168"},{"ruleId":"140","replacedBy":"169"},{"ruleId":"142","replacedBy":"170"},{"ruleId":"152","severity":1,"message":"158","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":25},{"ruleId":"152","severity":1,"message":"171","line":1,"column":27,"nodeType":"154","messageId":"155","endLine":1,"endColumn":36},{"ruleId":"162","severity":1,"message":"163","line":114,"column":7,"nodeType":"164","endLine":114,"endColumn":75},{"ruleId":"152","severity":1,"message":"157","line":1,"column":8,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13},{"ruleId":"152","severity":1,"message":"158","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":25},{"ruleId":"152","severity":1,"message":"172","line":16,"column":10,"nodeType":"154","messageId":"155","endLine":16,"endColumn":22},"no-native-reassign",["173"],"no-negated-in-lhs",["174"],["173"],["174"],["173"],["174"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'offset' and 'top'. Either include them or remove the dependency array. You can also do a functional update 'setTop(t => ...)' if you only need 'top' in the 'setTop' call.","ArrayExpression",["175"],"no-unused-vars","'streamCount' is assigned a value but never used.","Identifier","unusedVar","'setStreamCount' is assigned a value but never used.","'react' is defined but never used.","'AnimatePresence' is defined but never used.",["173"],["174"],"'setAlertArray' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'LIFETIME'. Either include it or remove the dependency array.",["176"],["173"],["174"],["173"],["174"],"'useEffect' is defined but never used.","'bitchReducer' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},"Update the dependencies array to be: [offset, props.index, top]",{"range":"181","text":"182"},"Update the dependencies array to be: [LIFETIME, props.alertCount]",{"range":"183","text":"184"},[799,812],"[offset, props.index, top]",[825,843],"[LIFETIME, props.alertCount]"]